{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from \"../shared/baseUrl\";\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const dishesLoading = () => {\n  return {\n    type: ActionTypes.DISHES_LOADING\n  };\n};\nexport const dishesFailed = errmess => {\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n  };\n};\nexport const addDishes = dishes => {\n  return {\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n  };\n};\nexport const fetchDishes = () => {\n  return function (dispatch) {\n    dispatch(dishesLoading);\n    fetch(baseUrl + 'dishes').then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, error => {\n      let errmess = new Error(error.message);\n      throw errmess;\n    }).then(response => response.json()).then(dishes => {\n      dispatch(addDishes(dishes));\n    }).catch(error => dispatch(dishesFailed(error.message)));\n  };\n}; //comments\n\nexport const fetchComments = () => dispatch => {\n  fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n}); //promos\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});","map":{"version":3,"sources":["/home/rohit/Public/dev_app/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","dishesLoading","DISHES_LOADING","dishesFailed","errmess","DISHES_FAILED","addDishes","dishes","ADD_DISHES","fetchDishes","dispatch","fetch","then","response","ok","error","Error","status","statusText","message","json","catch","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport {baseUrl} from \"../shared/baseUrl\";\n\nexport const addComment = (comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n});\n\n\n\nexport const dishesLoading = () =>{\n    return {\n        type: ActionTypes.DISHES_LOADING\n    }\n}\n\nexport const dishesFailed = (errmess) => {\n    return{\n        type: ActionTypes.DISHES_FAILED,\n        payload:errmess\n    }\n}\n\nexport const addDishes = (dishes) => {\n    return {\n        type: ActionTypes.ADD_DISHES,\n        payload: dishes\n    }\n}\n\nexport const fetchDishes = () => {\n    return function (dispatch){\n        dispatch(dishesLoading);\n\n        fetch(baseUrl + 'dishes')\n            .then(response => {\n                if(response.ok){\n                    return response;\n                }\n                else {\n                    let error = new Error('Error '+response.status+': '+response.statusText);\n                    error.response = response;\n\n                    throw error;\n                }\n            },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                })\n            .then(response => response.json())\n            .then(dishes => {\n                    dispatch(addDishes(dishes))\n                }\n            )\n            .catch(error => dispatch(dishesFailed(error.message)));\n    }\n}\n//comments\nexport const fetchComments = () => (dispatch) => {\n    fetch(baseUrl + 'comments')\n        .then(response => {\n                if(response.ok){\n                    return response;\n                }\n                else {\n                    let error = new Error('Error '+response.status+': '+response.statusText);\n                    error.response = response;\n\n                    throw error;\n                }\n            },\n            error => {\n                let errmess = new Error(error.message);\n                throw errmess;\n            })\n        .then(response => response.json())\n        .then(comments => dispatch(addComments(comments)))\n        .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n//promos\nexport const fetchPromos = () => (dispatch) => {\n\n    dispatch(promosLoading());\n\n    fetch(baseUrl + 'promotions')\n        .then(response => {\n                if(response.ok){\n                    return response;\n                }\n                else {\n                    let error = new Error('Error '+response.status+': '+response.statusText);\n                    error.response = response;\n\n                    throw error;\n                }\n            },\n            error => {\n                let errmess = new Error(error.message);\n                throw errmess;\n            })\n        .then(response => response.json())\n        .then(promos => dispatch(addPromos(promos)))\n        .catch(error => dispatch(promosFailed(error.message)));\n\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\n"]},"metadata":{},"sourceType":"module"}