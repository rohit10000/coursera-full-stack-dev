{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from \"../shared/baseUrl\";\nexport const addComment = (dishId, rating, author, comment) => {\n  return {\n    type: ActionTypes.ADD_COMMENT,\n    payload: {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n    }\n  };\n};\nexport const dishesLoading = () => {\n  return {\n    type: ActionTypes.DISHES_LOADING\n  };\n};\nexport const dishesFailed = errmess => {\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n  };\n};\nexport const addDishes = dishes => {\n  return {\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n  };\n};\nexport const fetchDishes = () => {\n  return function (dispatch) {\n    dispatch(dishesLoading);\n    fetch(baseUrl + 'dishes').then(response => response.json()).then(dishes => {\n      dispatch(addDishes(dishes));\n    });\n  };\n}; //comments\n\nexport const fetchComments = () => dispatch => {\n  fetch(baseUrl + 'comments').then(response => response.json()).then(comments => dispatch(addComments(comments)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n}); //promos\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  fetch(baseUrl + 'promotions').then(response => response.json()).then(promos => dispatch(addPromos(promos)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});","map":{"version":3,"sources":["/home/rohit/Public/dev_app/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","dishId","rating","author","comment","type","ADD_COMMENT","payload","dishesLoading","DISHES_LOADING","dishesFailed","errmess","DISHES_FAILED","addDishes","dishes","ADD_DISHES","fetchDishes","dispatch","fetch","then","response","json","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","PROMOS_LOADING","promosFailed","PROMOS_FAILED","ADD_PROMOS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport {baseUrl} from \"../shared/baseUrl\";\n\nexport const addComment = (dishId, rating, author, comment) =>{\n    return {\n        type: ActionTypes.ADD_COMMENT,\n        payload:{\n            dishId: dishId,\n            rating: rating,\n            author: author,\n            comment: comment\n        }\n    }\n}\n\nexport const dishesLoading = () =>{\n    return {\n        type: ActionTypes.DISHES_LOADING\n    }\n}\n\nexport const dishesFailed = (errmess) => {\n    return{\n        type: ActionTypes.DISHES_FAILED,\n        payload:errmess\n    }\n}\n\nexport const addDishes = (dishes) => {\n    return {\n        type: ActionTypes.ADD_DISHES,\n        payload: dishes\n    }\n}\n\nexport const fetchDishes = () => {\n    return function (dispatch){\n        dispatch(dishesLoading);\n\n        fetch(baseUrl + 'dishes')\n            .then(response => response.json())\n            .then(dishes => {\n                    dispatch(addDishes(dishes))\n                }\n            );\n\n    }\n}\n//comments\nexport const fetchComments = () => (dispatch) => {\n    fetch(baseUrl + 'comments')\n        .then(response => response.json())\n        .then(comments => dispatch(addComments(comments)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n//promos\nexport const fetchPromos = () => (dispatch) => {\n\n    dispatch(promosLoading());\n\n    fetch(baseUrl + 'promotions')\n        .then(response => response.json())\n        .then(promos => dispatch(addPromos(promos)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\n"]},"metadata":{},"sourceType":"module"}