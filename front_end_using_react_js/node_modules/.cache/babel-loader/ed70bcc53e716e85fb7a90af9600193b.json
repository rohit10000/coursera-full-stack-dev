{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from \"../shared/baseUrl\";\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const dishesLoading = () => {\n  return {\n    type: ActionTypes.DISHES_LOADING\n  };\n};\nexport const dishesFailed = errmess => {\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n  };\n};\nexport const addDishes = dishes => {\n  return {\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n  };\n};\nexport const fetchDishes = () => {\n  return function (dispatch) {\n    dispatch(dishesLoading);\n    fetch(baseUrl + 'dishes').then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }, error => {\n      let errmess = new Error(error.message);\n      throw errmess;\n    }).then(response => response.json()).then(dishes => {\n      dispatch(addDishes(dishes));\n    }).catch(error => dispatch(dishesFailed(error.message)));\n  };\n}; //comments\n\nexport const fetchComments = () => dispatch => {\n  fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n}); //promos\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n}); //Leaders\n\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\nexport const postFeedback = feedback => () => {\n  console.log(\"Debug in post feedback\", feedback);\n  let newFeedback = JSON.stringify(feedback);\n  newFeedback.date = new Date().toISOString();\n  fetch(baseUrl + 'feedback', {\n    method: 'POST',\n    body: newFeedback,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      let error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    let errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => {\n    console.log(\"Posted feedback successfully\", response);\n    alert(\"Thank you for your Feedback\\n\" + response);\n  }).catch(error => {\n    console.log(error);\n    alert(\"Sorry your feedback is not submitted\\n Error:\" + error);\n  });\n};","map":{"version":3,"sources":["/home/rohit/Public/dev_app/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","dishesLoading","DISHES_LOADING","dishesFailed","errmess","DISHES_FAILED","addDishes","dishes","ADD_DISHES","fetchDishes","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","postFeedback","feedback","newFeedback"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport {baseUrl} from \"../shared/baseUrl\";\n\nexport const addComment = (comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n});\n\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n    const newComment = {\n        dishId: dishId,\n        rating: rating,\n        author: author,\n        comment: comment\n    };\n    newComment.date = new Date().toISOString();\n\n    return fetch(baseUrl + 'comments', {\n        method: \"POST\",\n        body: JSON.stringify(newComment),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    let error = new Error('Error ' + response.status + ': ' + response.statusText);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                throw error;\n            })\n        .then(response => response.json())\n        .then(response => dispatch(addComment(response)))\n        .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\n};\n\n\n\nexport const dishesLoading = () =>{\n    return {\n        type: ActionTypes.DISHES_LOADING\n    }\n}\n\nexport const dishesFailed = (errmess) => {\n    return{\n        type: ActionTypes.DISHES_FAILED,\n        payload:errmess\n    }\n}\n\nexport const addDishes = (dishes) => {\n    return {\n        type: ActionTypes.ADD_DISHES,\n        payload: dishes\n    }\n}\n\nexport const fetchDishes = () => {\n    return function (dispatch){\n        dispatch(dishesLoading);\n\n        fetch(baseUrl + 'dishes')\n            .then(response => {\n                if(response.ok){\n                    return response;\n                }\n                else {\n                    let error = new Error('Error '+response.status+': '+response.statusText);\n                    error.response = response;\n\n                    throw error;\n                }\n            },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                })\n            .then(response => response.json())\n            .then(dishes => {\n                    dispatch(addDishes(dishes))\n                }\n            )\n            .catch(error => dispatch(dishesFailed(error.message)));\n    }\n}\n//comments\nexport const fetchComments = () => (dispatch) => {\n    fetch(baseUrl + 'comments')\n        .then(response => {\n                if(response.ok){\n                    return response;\n                }\n                else {\n                    let error = new Error('Error '+response.status+': '+response.statusText);\n                    error.response = response;\n\n                    throw error;\n                }\n            },\n            error => {\n                let errmess = new Error(error.message);\n                throw errmess;\n            })\n        .then(response => response.json())\n        .then(comments => dispatch(addComments(comments)))\n        .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n//promos\nexport const fetchPromos = () => (dispatch) => {\n\n    dispatch(promosLoading());\n\n    fetch(baseUrl + 'promotions')\n        .then(response => {\n                if(response.ok){\n                    return response;\n                }\n                else {\n                    let error = new Error('Error '+response.status+': '+response.statusText);\n                    error.response = response;\n\n                    throw error;\n                }\n            },\n            error => {\n                let errmess = new Error(error.message);\n                throw errmess;\n            })\n        .then(response => response.json())\n        .then(promos => dispatch(addPromos(promos)))\n        .catch(error => dispatch(promosFailed(error.message)));\n\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\n//Leaders\n\nexport const fetchLeaders = () => (dispatch) => {\n\n    dispatch(leadersLoading());\n\n    fetch(baseUrl + 'leaders')\n        .then(response => {\n                if(response.ok){\n                    return response;\n                }\n                else {\n                    let error = new Error('Error '+response.status+': '+response.statusText);\n                    error.response = response;\n\n                    throw error;\n                }\n            },\n            error => {\n                let errmess = new Error(error.message);\n                throw errmess;\n            })\n        .then(response => response.json())\n        .then(leaders => dispatch(addLeaders(leaders)))\n        .catch(error => dispatch(leadersFailed(error.message)));\n}\n\nexport const leadersLoading = () => ({\n    type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = (errmess) => ({\n    type: ActionTypes.LEADERS_FAILED,\n    payload: errmess\n});\n\nexport const addLeaders = (leaders) => ({\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n});\n\n\nexport const postFeedback = (feedback) => () => {\n    console.log(\"Debug in post feedback\", feedback);\n    let newFeedback = JSON.stringify(feedback);\n    newFeedback.date = new Date().toISOString();\n\n    fetch(baseUrl + 'feedback',{\n        method: 'POST',\n        body: newFeedback,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n        .then(response => {\n                if(response.ok){\n                    return response;\n                }\n                else {\n                    let error = new Error('Error '+response.status+': '+response.statusText);\n                    error.response = response;\n\n                    throw error;\n                }\n            },\n            error => {\n                let errmess = new Error(error.message);\n                throw errmess;\n            })\n        .then(response => response.json())\n        .then(response => {\n            console.log(\"Posted feedback successfully\", response)\n            alert(\"Thank you for your Feedback\\n\"+ response);\n        })\n        .catch(error => {\n            console.log(error);\n            alert(\"Sorry your feedback is not submitted\\n Error:\"+ error);\n        });\n}\n\n"]},"metadata":{},"sourceType":"module"}