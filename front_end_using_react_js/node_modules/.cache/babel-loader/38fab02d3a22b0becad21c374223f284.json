{"ast":null,"code":"import * as ActionTypes from './ActionTypes'; // import fetch from \"cross-fetch\";\n\nimport { baseUrl } from \"../shared/baseUrl\";\nexport const addComment = (dishId, rating, author, comment) => {\n  return {\n    type: ActionTypes.ADD_COMMENT,\n    payload: {\n      dishId: dishId,\n      rating: rating,\n      author: author,\n      comment: comment\n    }\n  };\n};\nexport const dishesLoading = () => {\n  return {\n    type: ActionTypes.DISHES_LOADING\n  };\n};\nexport const dishesFailed = errmess => {\n  return {\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n  };\n};\nexport const addDishes = dishes => {\n  return {\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n  };\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading());\n  console.log(\"Debug in fetchDishes1: \");\n  return fetch(baseUrl + 'dishes').then(response => response.json()).then(dishes => dispatch(addDishes(dishes)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchComments = () => {\n  return function (dispatch) {\n    return fetch(baseUrl + 'comments').then(res => res.json()).then(comments => dispatch(addComments(comments)));\n  };\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchPromos = () => {\n  return function (dispatch) {\n    dispatch(promosLoading());\n    return fetch(baseUrl + 'comments').then(res => res.json()).then(promos => dispatch(addPromos(promos)));\n  };\n};","map":{"version":3,"sources":["/home/rohit/Public/dev_app/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","dishId","rating","author","comment","type","ADD_COMMENT","payload","dishesLoading","DISHES_LOADING","dishesFailed","errmess","DISHES_FAILED","addDishes","dishes","ADD_DISHES","fetchDishes","dispatch","console","log","fetch","then","response","json","commentsFailed","COMMENTS_FAILED","addComments","comments","ADD_COMMENTS","fetchComments","res","promosLoading","PROMOS_LOADING","promosFailed","PROMOS_FAILED","addPromos","promos","ADD_PROMOS","fetchPromos"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\n// import fetch from \"cross-fetch\";\n\nimport {baseUrl} from \"../shared/baseUrl\";\n\nexport const addComment = (dishId, rating, author, comment) =>{\n    return {\n        type: ActionTypes.ADD_COMMENT,\n        payload:{\n            dishId: dishId,\n            rating: rating,\n            author: author,\n            comment: comment\n        }\n    }\n}\n\nexport const dishesLoading = () =>{\n    return {\n        type: ActionTypes.DISHES_LOADING\n    }\n}\n\nexport const dishesFailed = (errmess) => {\n    return{\n        type: ActionTypes.DISHES_FAILED,\n        payload:errmess\n    }\n}\n\nexport const addDishes = (dishes) => {\n    return {\n        type: ActionTypes.ADD_DISHES,\n        payload: dishes\n    }\n}\n\nexport const fetchDishes = () => (dispatch) => {\n\n    dispatch(dishesLoading());\n    console.log(\"Debug in fetchDishes1: \")\n\n    return fetch(baseUrl + 'dishes')\n        .then(response => response.json())\n        .then(dishes => dispatch(addDishes(dishes)));\n}\n\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\nexport const fetchComments = () => {\n    return function (dispatch) {\n        return fetch(baseUrl+'comments')\n            .then(res => res.json())\n            .then(comments => dispatch(addComments((comments))));\n    }\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\nexport const fetchPromos = () => {\n    return function (dispatch){\n        dispatch(promosLoading())\n\n        return fetch(baseUrl + 'comments')\n            .then(res => res.json())\n            .then(promos => dispatch(addPromos(promos)));\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}